#!/bin/bash

# AWS Setup Script for Agriculture Agent Bedrock Configuration
# This script checks AWS CLI setup and generates a bedrock.env file with available models

set -e

echo "==================================="
echo "AWS Bedrock Setup Script"
echo "Agriculture Agent ECS"
echo "==================================="
echo ""

# Check if AWS CLI is installed
if ! command -v aws &> /dev/null; then
    echo "‚ùå ERROR: AWS CLI is not installed."
    echo "Please install AWS CLI first: https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html"
    exit 1
fi

echo "‚úÖ AWS CLI is installed"
echo "AWS CLI version: $(aws --version)"
echo ""

# Check AWS credentials configuration
echo "Checking AWS credentials..."
if ! aws sts get-caller-identity &> /dev/null; then
    echo "‚ùå ERROR: AWS credentials are not configured."
    echo "Please run 'aws configure' to set up your credentials."
    exit 1
fi

# Get current AWS profile and account info
CURRENT_PROFILE="${AWS_PROFILE:-default}"
ACCOUNT_INFO=$(aws sts get-caller-identity)
ACCOUNT_ID=$(echo $ACCOUNT_INFO | jq -r '.Account')
USER_ARN=$(echo $ACCOUNT_INFO | jq -r '.Arn')

echo "‚úÖ AWS credentials are configured"
echo "Current profile: $CURRENT_PROFILE"
echo "Account ID: $ACCOUNT_ID"
echo "User/Role ARN: $USER_ARN"
echo ""

# Get the current region
CURRENT_REGION=$(aws configure get region || echo "us-east-1")
echo "Current region: $CURRENT_REGION"
echo ""

# Check if Bedrock is available in the current region
echo "Checking Bedrock availability in $CURRENT_REGION..."
if ! aws bedrock list-foundation-models --region $CURRENT_REGION &> /dev/null; then
    echo "‚ö†Ô∏è  WARNING: Unable to list Bedrock models. This could mean:"
    echo "   - Bedrock is not available in your region ($CURRENT_REGION)"
    echo "   - You don't have permissions to access Bedrock"
    echo "   - Your account doesn't have Bedrock enabled"
    echo ""
    echo "Continuing with default configuration..."
    
    # Create default bedrock.env
    cat > bedrock.env << EOF
# Bedrock Configuration - Generated by aws-setup.sh
# WARNING: Unable to detect available models. Using defaults.
# Please verify these settings match your AWS Bedrock setup.

BEDROCK_MODEL_ID=amazon.nova-lite-v1:0
BEDROCK_REGION=$CURRENT_REGION
BEDROCK_TEMPERATURE=0
LOG_LEVEL=INFO

# AWS Profile (optional - remove if using IAM roles in ECS)
# AWS_PROFILE=$CURRENT_PROFILE
EOF
    
    echo "Created bedrock.env with default settings"
    echo ""
    echo "üìù To use this configuration:"
    echo "   cp bedrock.env ../.env"
    echo ""
    echo "‚ö†Ô∏è  Please verify that you have access to Bedrock and the model specified."
    exit 0
fi

# List available models
echo "‚úÖ Bedrock is available!"
echo "Fetching available models..."
echo ""

# Get all available models
MODELS=$(aws bedrock list-foundation-models --region $CURRENT_REGION --output json)

# Models supported by the agriculture agent (from services.cfn)
SUPPORTED_MODELS="amazon.nova-lite-v1:0
amazon.nova-pro-v1:0
anthropic.claude-3-5-sonnet-20240620-v1:0
anthropic.claude-3-haiku-20240307-v1:0
anthropic.claude-3-opus-20240229-v1:0
meta.llama3-70b-instruct-v1:0
meta.llama3-1-70b-instruct-v1:0
cohere.command-r-plus-v1:0
cohere.command-r-v1:0"

# Find available supported models
echo "Checking for supported models..."
AVAILABLE_SUPPORTED=""
for model in $SUPPORTED_MODELS; do
    if echo $MODELS | jq -r '.modelSummaries[].modelId' | grep -q "^${model}$"; then
        AVAILABLE_SUPPORTED="$AVAILABLE_SUPPORTED$model\n"
    fi
done

if [ -z "$AVAILABLE_SUPPORTED" ]; then
    echo "‚ö†Ô∏è  No supported models found. Available models in your region:"
    echo $MODELS | jq -r '.modelSummaries[].modelId' | sort -u | sed 's/^/  - /'
    SELECTED_MODEL="amazon.nova-lite-v1:0"
    echo ""
    echo "Using default model: $SELECTED_MODEL"
else
    echo "Available supported models:"
    echo -e "$AVAILABLE_SUPPORTED" | sed 's/^/  - /'
    
    # Select the best available model
    if echo -e "$AVAILABLE_SUPPORTED" | grep -q "amazon.nova-lite-v1:0"; then
        SELECTED_MODEL="amazon.nova-lite-v1:0"
        echo ""
        echo "Selected model: $SELECTED_MODEL (fast and cost-effective)"
    elif echo -e "$AVAILABLE_SUPPORTED" | grep -q "anthropic.claude-3-haiku"; then
        SELECTED_MODEL="anthropic.claude-3-haiku-20240307-v1:0"
        echo ""
        echo "Selected model: $SELECTED_MODEL (fast Claude model)"
    elif echo -e "$AVAILABLE_SUPPORTED" | grep -q "anthropic.claude-3-5-sonnet"; then
        SELECTED_MODEL="anthropic.claude-3-5-sonnet-20240620-v1:0"
        echo ""
        echo "Selected model: $SELECTED_MODEL (high quality)"
    else
        # Use first available
        SELECTED_MODEL=$(echo -e "$AVAILABLE_SUPPORTED" | head -1)
        echo ""
        echo "Selected model: $SELECTED_MODEL"
    fi
fi

# Create bedrock.env file
echo ""
echo "Creating bedrock.env file..."

cat > bedrock.env << EOF
# Bedrock Configuration for Agriculture Agent - Generated by aws-setup.sh
# Generated on: $(date)
# AWS Account: $ACCOUNT_ID
# AWS Region: $CURRENT_REGION
# AWS Profile: $CURRENT_PROFILE

# Bedrock Model Configuration
BEDROCK_MODEL_ID=$SELECTED_MODEL
BEDROCK_REGION=$CURRENT_REGION
BEDROCK_TEMPERATURE=0
LOG_LEVEL=INFO

# Optional: AWS Profile (remove this when deploying to ECS with IAM roles)
# AWS_PROFILE=$CURRENT_PROFILE

# Model Options:
# - amazon.nova-lite-v1:0         # Fast and cost-effective (default)
# - amazon.nova-pro-v1:0          # Higher performance
# - anthropic.claude-3-5-sonnet-20240620-v1:0  # Best quality
# - anthropic.claude-3-haiku-20240307-v1:0     # Fast Claude model
# - meta.llama3-70b-instruct-v1:0              # Open source option
# - cohere.command-r-plus-v1:0                 # Optimized for RAG

# Temperature: 0-1 (0 = deterministic, 1 = creative)
# Log Level: DEBUG, INFO, WARNING, ERROR
EOF

echo "‚úÖ Successfully created bedrock.env"
echo ""
echo "==================================="
echo "Setup Complete!"
echo "==================================="
echo ""
echo "üìù To use this configuration in your local development:"
echo "   cp bedrock.env ../.env"
echo ""
echo "üöÄ The main agent will use these environment variables to connect to AWS Bedrock."
echo ""
echo "üí° Tips:"
echo "   - For ECS deployment, remove AWS_PROFILE and use IAM task roles instead"
echo "   - Temperature of 0 provides most consistent responses"
echo "   - Nova Lite is recommended for cost-effective operation"
echo "   - Claude Sonnet provides the best quality but at higher cost"
echo ""

# Check specific model access
echo "Checking access to selected model..."
if aws bedrock invoke-model \
    --model-id "$SELECTED_MODEL" \
    --region "$CURRENT_REGION" \
    --content-type "application/json" \
    --accept "application/json" \
    --body '{"prompt": "Test", "max_tokens": 10}' \
    /tmp/bedrock-test-output.json &> /dev/null; then
    echo "‚úÖ Successfully verified access to $SELECTED_MODEL"
    rm -f /tmp/bedrock-test-output.json
else
    echo "‚ö†Ô∏è  WARNING: Unable to invoke $SELECTED_MODEL"
    echo "   Please ensure the model is enabled in the AWS Bedrock console"
    echo "   https://console.aws.amazon.com/bedrock/home?region=$CURRENT_REGION#/modelaccess"
fi

echo ""