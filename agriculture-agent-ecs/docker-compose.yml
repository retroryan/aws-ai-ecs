services:
  # Unified Weather MCP Server
  weather-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.weather
    container_name: mcp-weather-server
    ports:
      - "7071:7071"
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MCP_PORT=7071
    networks:
      - weather-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7071/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

  # Weather Agent Application
  weather-agent:
    build:
      context: .
      dockerfile: docker/Dockerfile.main
    container_name: weather-agent-app
    ports:
      - "7075:7075"
    environment:
      # AWS Bedrock Configuration
      - BEDROCK_MODEL_ID=${BEDROCK_MODEL_ID}
      - BEDROCK_REGION=${BEDROCK_REGION:-us-east-1}
      - BEDROCK_TEMPERATURE=${BEDROCK_TEMPERATURE:-0}
      # AWS Credentials (if not using IAM role)
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
      # MCP Server URL (internal Docker network)
      - MCP_SERVER_URL=http://weather-server:7071/mcp
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      weather-server:
        condition: service_healthy
    networks:
      - weather-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7075/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

networks:
  weather-network:
    driver: bridge

volumes:
  logs:
    driver: local