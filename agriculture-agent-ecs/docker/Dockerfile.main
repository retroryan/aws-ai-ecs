# Main Agent Application
FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install dependencies
COPY weather_agent/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Create FastAPI application
RUN cat > app.py << 'EOF'
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import os
import asyncio
import logging
import uvicorn
from weather_agent.mcp_agent import MCPWeatherAgent

logging.basicConfig(level=os.getenv('LOG_LEVEL', 'INFO'))
logger = logging.getLogger(__name__)

app = FastAPI(title="Agriculture Agent API", version="1.0.0")

# Global agent instance
agent = None

class QueryRequest(BaseModel):
    query: str

class QueryResponse(BaseModel):
    response: str
    tools_used: list[str] = []

@app.on_event("startup")
async def startup_event():
    """Initialize the weather agent on startup."""
    global agent
    try:
        # Override MCP server URLs from environment if provided
        if os.getenv('MCP_FORECAST_URL'):
            os.environ['FORECAST_URL'] = os.getenv('MCP_FORECAST_URL')
        if os.getenv('MCP_HISTORICAL_URL'):
            os.environ['HISTORICAL_URL'] = os.getenv('MCP_HISTORICAL_URL')
        if os.getenv('MCP_AGRICULTURAL_URL'):
            os.environ['AGRICULTURAL_URL'] = os.getenv('MCP_AGRICULTURAL_URL')
        
        logger.info("Initializing Weather Agent...")
        agent = MCPWeatherAgent()
        await agent.initialize()
        logger.info("Weather Agent initialized successfully")
    except Exception as e:
        logger.error(f"Failed to initialize agent: {e}")
        raise

@app.on_event("shutdown")
async def shutdown_event():
    """Cleanup on shutdown."""
    global agent
    if agent:
        await agent.cleanup()

@app.get("/health")
async def health_check():
    """Health check endpoint for load balancer."""
    if agent is None:
        raise HTTPException(status_code=503, detail="Agent not initialized")
    return {"status": "healthy", "model": os.getenv('BEDROCK_MODEL_ID', 'unknown')}

@app.post("/query", response_model=QueryResponse)
async def query(request: QueryRequest):
    """Process a weather-related query."""
    if agent is None:
        raise HTTPException(status_code=503, detail="Agent not initialized")
    
    try:
        response = await agent.query(request.query)
        # Extract tools used from response (simplified)
        tools_used = []
        if hasattr(agent, 'last_tools_used'):
            tools_used = agent.last_tools_used
        
        return QueryResponse(response=response, tools_used=tools_used)
    except Exception as e:
        logger.error(f"Query error: {e}")
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=7075)
EOF

# Copy application code
COPY weather_agent/ weather_agent/
COPY mcp_servers/api_utils.py mcp_servers/api_utils.py

# Create non-root user
RUN useradd -m -u 1000 appuser && chown -R appuser:appuser /app
USER appuser

# Expose API port
EXPOSE 7075

# Run the FastAPI application
CMD ["python", "app.py"]