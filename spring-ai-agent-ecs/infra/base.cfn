AWSTemplateFormatVersion: "2010-09-09"
Description: Spring AI MCP Agent - Base Infrastructure

Resources:
  ApplicationVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ApplicationVPC
      InternetGatewayId: !Ref InternetGateway

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ApplicationVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs '']

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ApplicationVPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [1, !GetAZs '']

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ApplicationVPC

  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AWS::StackName}-cluster

  LogGroup:
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AWS::StackName}
      RetentionInDays: 1

  ServerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ClientExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: BedrockInvokeAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource:
                  - arn:aws:bedrock:us-east-1::foundation-model/amazon.nova-pro-v1:0

  ServiceConnectNamespace:
    Type: AWS::ServiceDiscovery::HttpNamespace
    Properties:
      Name: !Sub ${AWS::StackName}
      Description: "Namespace for MCP Agent Spring AI services"

  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for container
      VpcId: !Ref ApplicationVPC
      SecurityGroupIngress:
        - FromPort: 8010
          ToPort: 8010
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref ClientSecurityGroup

  ClientSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for container
      VpcId: !Ref ApplicationVPC
      SecurityGroupIngress:
        - FromPort: 8011
          ToPort: 8011
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      SecurityGroupEgress:
        # Allow traffic to Bedrock service
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0  # Bedrock endpoints are public AWS services
          Description: "Allow HTTPS traffic to Amazon Bedrock"
        # Allow traffic to MCP Server on port 8010
        - IpProtocol: tcp
          FromPort: 8010
          ToPort: 8010
          CidrIp: 0.0.0.0/0
          Description: "Allow traffic to MCP Server on port 8010"

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId: !Ref ApplicationVPC
      SecurityGroupIngress:
        - FromPort: 80
          ToPort: 8080
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Type: application

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /actuator/health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 120
      HealthCheckIntervalSeconds: 240
      Port: 8011
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref ApplicationVPC

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref ApplicationVPC
    Export:
      Name: !Sub ${AWS::StackName}-vpc-id

  PrivateSubnet1Id:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-subnet1-id

  PrivateSubnet2Id:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-subnet2-id

  ECSClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${AWS::StackName}-cluster-name

  LogGroupName:
    Description: CloudWatch Log Group Name
    Value: !Ref LogGroup
    Export:
      Name: !Sub ${AWS::StackName}-log-group

  ServerExecutionRoleArn:
    Description: Server Execution Role ARN
    Value: !GetAtt ServerExecutionRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-server-exec-role

  ClientExecutionRoleArn:
    Description: Client Execution Role ARN
    Value: !GetAtt ClientExecutionRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-client-exec-role

  TaskRoleArn:
    Description: Task Role ARN
    Value: !GetAtt TaskRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-task-role

  ServiceConnectNamespaceArn:
    Description: Service Connect Namespace ARN
    Value: !GetAtt ServiceConnectNamespace.Arn
    Export:
      Name: !Sub ${AWS::StackName}-namespace-arn

  ServerSecurityGroupId:
    Description: Server Security Group ID
    Value: !Ref ServerSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-server-sg

  ClientSecurityGroupId:
    Description: Client Security Group ID
    Value: !Ref ClientSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-client-sg

  TargetGroupArn:
    Description: Target Group ARN
    Value: !Ref TargetGroup
    Export:
      Name: !Sub ${AWS::StackName}-target-group

  LoadBalancerDNS:
    Description: DNS name of the load balancer
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub ${AWS::StackName}-lb-dns