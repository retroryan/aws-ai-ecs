services:
  # Ollama Service (optional - use with --profile ollama)
  ollama:
    image: ollama/ollama
    container_name: ollama
    profiles:
      - ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama:/root/.ollama
    networks:
      - weather-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 30s

  # Forecast MCP Server
  forecast-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.forecast
    container_name: mcp-forecast-server
    ports:
      - "8081:8081"
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MCP_PORT=8081
    networks:
      - weather-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

  # Historical MCP Server  
  historical-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.historical
    container_name: mcp-historical-server
    ports:
      - "8082:8082"
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MCP_PORT=8082
    networks:
      - weather-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

  # Agricultural MCP Server
  agricultural-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.agricultural
    container_name: mcp-agricultural-server
    ports:
      - "8083:8083"
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MCP_PORT=8083
    networks:
      - weather-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

  # Weather Agent Application
  weather-agent:
    build:
      context: .
      dockerfile: docker/Dockerfile.main
    container_name: weather-agent-app
    ports:
      - "8090:8090"
    environment:
      # Model Provider Configuration
      - MODEL_PROVIDER=${MODEL_PROVIDER:-bedrock}
      # AWS Bedrock Configuration
      - BEDROCK_MODEL_ID=${BEDROCK_MODEL_ID}
      - BEDROCK_REGION=${BEDROCK_REGION:-us-west-2}
      - BEDROCK_TEMPERATURE=${BEDROCK_TEMPERATURE:-0}
      # AWS Credentials (if not using IAM role)
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-west-2}
      # Ollama Configuration
      - OLLAMA_MODEL=${OLLAMA_MODEL:-llama3.2}
      - OLLAMA_HOST=${OLLAMA_HOST:-http://ollama:11434}
      - OLLAMA_TEMPERATURE=${OLLAMA_TEMPERATURE:-0.7}
      - OLLAMA_MAX_TOKENS=${OLLAMA_MAX_TOKENS:-4096}
      - OLLAMA_TOP_P=${OLLAMA_TOP_P:-0.9}
      - OLLAMA_TIMEOUT=${OLLAMA_TIMEOUT:-60}
      # MCP Server URLs (internal Docker network)
      - MCP_FORECAST_URL=http://forecast-server:8081/mcp/
      - MCP_HISTORICAL_URL=http://historical-server:8082/mcp/
      - MCP_AGRICULTURAL_URL=http://agricultural-server:8083/mcp/
      # API Configuration
      - API_PORT=8090
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      forecast-server:
        condition: service_healthy
      historical-server:
        condition: service_healthy
      agricultural-server:
        condition: service_healthy
    networks:
      - weather-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

networks:
  weather-network:
    driver: bridge

volumes:
  ollama:
    driver: local
  logs:
    driver: local